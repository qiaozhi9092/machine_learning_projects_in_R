if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(nr - 1, nc - 1))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america
par(mfrow=c(1,2))
plot.local.or(table_alaska)
plot.local.or(table_america)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america
par(mfrow=c(1,2))
plot.local.or(table_alaska)
plot.local.or(table_america)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america
par(mfrow=c(1,2))
plot.local.or(table_alaska, main = "Fourfold plot for Alaska Airlines")
#plot.local.or(table_america)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##Full
table_full <- matrix(c(3274,501,6438,787),
ncol = 2, dimnames = list(c("Alaska", "America"), c("On time", "Delayed")))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america and full
plot.local.or(table_alaska)
plot.local.or(table_america)
plot.local.or(table_full)
#plot.local.or(table_full)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##Full
table_full <- matrix(c(3274,501,6438,787),
ncol = 2, dimnames = list(c("Alaska", "America"), c("On time", "Delayed")))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america and full
plot.local.or(table_alaska)
plot.local.or(table_america)
#plot.local.or(table_full)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##Full
table_full <- matrix(c(3274,501,6438,787),
ncol = 2, dimnames = list(c("Alaska", "America"), c("On time", "Delayed")))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america and full
plot.local.or(table_alaska)
#plot.local.or(table_america)
#plot.local.or(table_full)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##Full
table_full <- matrix(c(3274,501,6438,787),
ncol = 2, dimnames = list(c("Alaska", "America"), c("On time", "Delayed")))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##fourfold plot for alaska and america and full
plot.local.or(table_alaska)
#plot.local.or(table_america)
plot.local.or(table_full)
airport <- c("Los Angeles", "Phoenix", "San Diego", "San Francisco", "Seattle")
##Alaska
alaska <- c("On time", "Delayed")
table_alaska <- matrix(c(497,221,212,503,1841,62,12,20,102,305),
ncol = 2, dimnames = list(airport, alaska))
##America
america <- c("On time", "Delayed")
table_america <- matrix(c(694,4840,383,320,201,117,415,65,129,61),
ncol = 2, dimnames = list(airport, america))
##Full
table_full <- matrix(c(3274,501,6438,787),
ncol = 2, dimnames = list(c("Alaska", "America"), c("On time", "Delayed")))
##foutfold
plot.local.or <- function(m, col = c("cornflowerblue", "aquamarine")) {
nr <- nrow(m)
if (nr < 2) stop("number of rows is less than two")
nc <- ncol(m)
if (nc < 2) stop("number of columns is less than two")
par(mfrow = c(2, 2))
for (i in 1:(nr - 1))
for (j in 1:(nc - 1)) {
fourfoldplot(m[i:(i+1), j:(j+1)], color = col)
}
}
##chi square test
chisq.lr = function(x, p = rep(1 / length(x), length(x)), level = 0.05, digits = 3) {
stat <- log(x / (sum(x) * p))
stat <- 2 * sum(x * stat)
df <- length(x) - 1
c.val <- qchisq(level, df = df, lower.tail = FALSE)
cat("G-squared = ", round(stat, digits), ", df = ", df,
", level = ", level, ", critical value = ", round(c.val, digits), "\n", sep = "")
invisible(list("stat" = stat, "df" = df, "c.val" = c.val))
}
##fourfold plot for alaska and america and full
plot.local.or(table_alaska)
#plot.local.or(table_america)
#plot.local.or(table_full)
chisq.lr(table_full)
mantelhaen.test(table_full, correct = FALSE, exact = FALSE)
?t
?t()
t
t()
a <- matrix(1:30, 5,6)
a
a[1,1]
a[1,2]
?seq
seq(1:10)
a <- 5
a
a = 5
a
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
for i in seq(ncol(matrx)){
for j in seq(nrow(matrx)){
tran_matrx[i,j] = matrx[j,i]
}
}
return(tran_matrx)
}
a <- matrix(1:30, 5,6)
tran_matrx = matrix(, nrow = ncol(a), ncol = nrow(a))
tran_matrx
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
for (i in seq(ncol(matrx))){
for (j in seq(nrow(matrx))){
tran_matrx[j,i] = matrx[i,j]
}
}
return(tran_matrx)
}
a
matrixTran(a)
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
##  for (i in seq(ncol(matrx))){
##    for (j in seq(nrow(matrx))){
##      tran_matrx[j,i] = matrx[i,j]
##    }
##  }
return(tran_matrx)
}
matrixTran(a)
seq(ncol(matrx)
seq(ncol(a))
seq(nrow(a))
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
for (i in seq(ncol(matrx))){
for (j in seq(nrow(matrx))){
tran_matrx[i,j] = matrx[j,i]
}
}
return(tran_matrx)
}
matrixTran(a)
a
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
for (i in seq(ncol(matrx))){
for (j in seq(nrow(matrx))){
tran_matrx[i,j] = matrx[j,i]
}
}
return(tran_matrx)
}
matrixTran <- function(matrx){
tran_matrx = matrix(, nrow = ncol(matrx), ncol = nrow(matrx))
for (i in seq(ncol(matrx))){
for (j in seq(nrow(matrx))){
tran_matrx[i,j] = matrx[j,i]
}
}
return(tran_matrx)
}
turtles <- read.table(file = "http://www.public.iastate.edu/~maitra/stat501/datasets/turtles.dat", col.names = c("gender", "carapace length",  "carapace width", "carapace height"))
head(turtles)
turtlesf <- turtles[turtles$gender == 1, -1]
head(turtlesf)
turtlesf.pc <- prcomp(log(turtlesf))
head(turtlesf.pc)
turtlesf.pc <- prcomp(log(turtlesf))
turtlesf.pc
cumsum(turtlesf.pc$sdev^2)/sum(turtlesf.pc$sdev^2)
turtlesf.pcr <- prcomp(log(turtlesf), scale = T)
turtlesf.pcr
(cumvar <- cumsum(turtlesf.pcr$sdev^2)/sum(turtlesf.pcr$sdev^2))
propvar <- turtlesf.pcr$sdev^2/sum(turtlesf.pcr$sdev^2)
# Similar story for correlations
par(pch=5,fin=c(5,5))
choose<-c(1,2,3)
pairs(log(turtlesf[ ,choose]),labels=c("log(length)","log(width)","log(height)"))
# Plot component scores of the PCs:
par(pch=5,fin=c(5,5))
choose<-c(1,2,3)
pairs(turtlesf.pc$x[ ,choose],labels=c("PC1", "PC2", "PC3"))
?randomtree
library(randomtree)
library(randomForest)
?randomForest
library(randomForest)
iris_test <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE))
iris_test$importance
library(randomForest)
iris_test <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
iris_test$importance
iris_test$importance
iris_test <- randomForest(Species ~ ., data=iris, importance=TRUE, ntree = 100)
iris_test$importance
importance(iris_test)
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.nall, importance=TRUE, ntree = 100)
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.null, importance=TRUE, ntree = 100)
library(randomForest)
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.omit, importance=TRUE, ntree = 100)
importance(iris_test)
plot(importance(iris_test))
sort(importance(iris_test))
sort(importance(iris_test), desc = TRUE)
?sort
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.omit, importance=TRUE, ntree = 100, mtry = 3)
importance(iris_test)
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.omit, importance=TRUE, ntree = 100)
iris_test <- randomForest(Species ~ ., data=iris, na.action = na.omit, importance=TRUE, ntree = 100, mtry = 3)
importance(iris_test)
setwd("~/Desktop/machine_learning_projects_in_R")
college <- read.csv("College")
fix(college)
college <- read.csv("College")
fix(college)
college <- read.csv("College.csv")
fix(college)
#load in the data
college <- read.csv("College.csv")
#look at the data
fix(college)
#load in the data
college <- read.csv("College.csv")
#look at the data
fix(college)
#rename the rows
rownames(college) = college[,1]
fix(college)
#load in the data
college <- read.csv("College.csv")
#rename the rows
rownames(college) = college[,1]
#drop the first collumn
college = college[,-1]
#load in the data
college <- read.csv("College.csv")
#rename the rows
rownames(college) = college[,1]
#drop the first collumn
college = college[,-1]
View(college)
summary(college)
pair(college[,1:10])
pairs(college[,1:10])
plot(college$Private, college$Outstate)
college$Top10perc
Elite = rep("No", nrow(college))
Elite
#load in the data
college <- read.csv("College.csv")
#rename the rows
rownames(college) = college[,1]
#drop the first collumn
college = college[,-1]
summary(college)
#create the first 10 features scatter plots
pairs(college[,1:10])
plot(college$Private, college$Outstate)
#divide universities into two groups based on whether or not the proportion
#of students coming from the top 10% of their high school classes exceeds 50 %
Elite = rep("No", nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
View(college)
summary(college)
plot(college$Outstate, college$Elite)
plot(college$Elite, college$Outstate)
plot(college$Elite, college$Outstate)
par(mfrow=c(2,2))
hist(college$Apps)
hist(college$perc.alumni, col=2)
hist(college$S.F.Ratio, col=3, breaks=10)
hist(college$Expend, breaks=100)
plot(college$Accept / college$Apps, college$S.F.Ratio)
par(mfrow=c(1,1))
plot(college$Outstate, college$Grad.Rate)
# High tuition correlates to high graduation rate.
plot(college$Accept / college$Apps, college$S.F.Ratio)
# Colleges with low acceptance rate tend to have low S:F ratio.
plot(college$Top10perc, college$Grad.Rate)
# Colleges with the most students from top 10% perc don't necessarily have
# the highest graduation rate. Also, rate > 100 is erroneous!
par(mfrow=c(2,1))
plot(college$Outstate, college$Grad.Rate)
# High tuition correlates to high graduation rate.
plot(college$Accept / college$Apps, college$S.F.Ratio)
# Colleges with low acceptance rate tend to have low S:F ratio.
par(mfrow=c(1,2))
plot(college$Outstate, college$Grad.Rate)
# High tuition correlates to high graduation rate.
plot(college$Accept / college$Apps, college$S.F.Ratio)
# Colleges with low acceptance rate tend to have low S:F ratio.
auto = read.csv("Auto.csv", header=T, na.strings="?")
auto = na.omit(auto)
summary(auto)
dim(auto)
range(auto)
range(auto$mpg)
range(auto[1,])
range(auto[,])
range(auto[,1:7])
sapply(auto[,1:7], range)
sapply(Auto[, 1:7], mean)
sapply(auto[, 1:7], mean)
sapply(auto[, 1:7], sd)
new_auto = Auto[-10:85, ]
new_auto = auto[-10:85, ]
new_auto = auto[-(10:85), ]
sapply(new_auto[, 1:7], range)
sapply(new_auto[, 1:7], mean)
sapply(new_auto[, 1:7], sd)
auto = read.csv("Auto.csv", header=T, na.strings="?")
pairs(Auto)
pairs(auto)
plot(Auto$mpg, Auto$weight)
plot(Auto$mpg, Auto$weight)
plot(auto$mpg, auto$weight)
plot(auto$mpg, auto$cylinders)
par(mfrow=c(1,1))
plot(auto$mpg, auto$weight)
plot(auto$mpg, auto$cylinders)
plot( auto$cylinders,auto$mpg)
plot(auto$mpg, auto$year)
library(MASS)
Boston
library(MASS)
?Boston
dim(Boston)
names(Boston)
pairs(Boston)
plot(Boston$age, Boston$crim)
par(mfrow=c(1,1))
plot(Boston$age, Boston$crim)
plot(Boston$dis, Boston$crim)
plot(Boston$rad, Boston$crim)
plot(Boston$tax, Boston$crim)
plot(Boston$ptratio, Boston$crim)
par(mfrow=c(1,3))
hist(Boston$crim[Boston$crim>1], breaks=25)
hist(Boston$crim[Boston$crim>1], breaks=25)
# most cities have low crime rates, but there is a long tail: 18 suburbs appear
# to have a crime rate > 20, reaching to above 80
hist(Boston$tax, breaks=25)
# there is a large divide between suburbs with low tax rates and a peak at 660-680
hist(Boston$ptratio, breaks=25)
# a skew towards high ratios, but no particularly high ratios
par(mfrow=c(1,3))
hist(Boston$crim[Boston$crim>1], breaks=25)
# most cities have low crime rates, but there is a long tail: 18 suburbs appear
# to have a crime rate > 20, reaching to above 80
hist(Boston$tax, breaks=25)
# there is a large divide between suburbs with low tax rates and a peak at 660-680
hist(Boston$ptratio, breaks=25)
# a skew towards high ratios, but no particularly high ratios
subset(Boston, chas == 1)
names(Boston)
dim(Boston[chas == 1])
dim(Boston[Boston$chas == 1])
Boston$chas == 1
Dim(Boston$chas == 1)
# Older homes, more crime
dim(Boston$chas == 1)
subset(Boston$chas == 1)
subset(Boston, chas == 1)
dim(subset(Boston, chas == 1))
count(Boston[chas == 1])
sum(Boston[chas == 1])
sum(Boston$chas == 1)
t(subset(Boston, medv == min(Boston$medv)))
seltown <- subset(Boston, Boston$medv == min(Boston$medv))
seltown
sapply(Boston, quantile)
nrow(Boston[Boston$rm > 7,])
sum(Boston[Boston$rm > 7,])
nrow(Boston[Boston$rm > 7,])
sum(Boston$rm > 7)
summary(subset(Boston, rm > 8))
rbind(sapply(Boston[Boston$rm > 8,], mean), sapply(Boston, median))
sapply(Boston, median)
